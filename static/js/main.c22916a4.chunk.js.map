{"version":3,"sources":["CacheBuster.js","Components/NavigationItem.js","Containers/NavigationBar.js","Components/Header.js","Components/HomeContent.js","Components/Home.js","Items/ExperienceCard.js","Components/Experience.js","Containers/App.js","serviceWorker.js","index.js"],"names":["global","appVersion","packageJson","version","CacheBuster","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","keys","then","names","name","delete","window","location","reload","fetch","response","json","meta","latestVersion","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","semverGreaterThan","setState","this","children","React","Component","NavigationItem","className","activeClassName","exact","to","toLink","item","NavigationBar","Header","size","href","style","textDecoration","color","download","HomeContent","Home","ExperienceCard","Experience","App","basename","process","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"0MAEAA,EAAOC,WAAaC,EAAYC,QAGhC,IAgBMC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,iBAAiB,EACjBC,sBAAuB,WACrBC,QAAQC,IAAI,wCACRC,QAEFA,OAAOC,OAAOC,MAAK,SAASC,GAAQ,IAAD,gBAChBA,GADgB,IACjC,gCAASC,EAAT,QAAwBJ,OAAOK,OAAOD,IADL,kCAMrCE,OAAOC,SAASC,QAAO,KAfV,E,gEAoBE,IAAD,OAClBC,MAAM,cACHP,MAAK,SAACQ,GAAD,OAAcA,EAASC,UAC5BT,MAAK,SAACU,GACL,IAAMC,EAAgBD,EAAKrB,SAzCT,SAACuB,EAAUC,GAInC,IAHA,IAAMC,EAAYF,EAASG,MAAM,OAE3BC,EAAYH,EAASE,MAAM,OAC1BD,EAAUG,QAAUD,EAAUC,QAAQ,CAC3C,IAAMC,EAAIC,OAAOL,EAAUM,SAErBC,EAAIF,OAAOH,EAAUI,SAE3B,GAAIF,IAAMG,EAEV,OAAOH,EAAIG,GAAKC,MAAMD,GAExB,OAAO,GA+B0BE,CAAkBZ,EAFtBzB,EAAOC,aAI5BS,QAAQC,IAAR,kCAAuCc,EAAvC,2BACA,EAAKa,SAAS,CAAE/B,SAAS,EAAOC,iBAAiB,MAEjDE,QAAQC,IAAR,gDAAqDc,EAArD,+BACA,EAAKa,SAAS,CAAE/B,SAAS,EAAOC,iBAAiB,U,+BAI/C,IAAD,EACqD+B,KAAKjC,MAAzDC,EADD,EACCA,QAASC,EADV,EACUA,gBAAiBC,EAD3B,EAC2BA,sBAClC,OAAO8B,KAAKlC,MAAMmC,SAAS,CAAEjC,UAASC,kBAAiBC,8B,GAxCjCgC,IAAMC,WA4CjBtC,Q,kxCClDAuC,G,mLARX,OACE,kBAAC,IAAD,CAASC,UAAU,iBAAiBC,gBAAgB,mBAAmBC,OAAK,EAACC,GAAIR,KAAKlC,MAAM2C,QACrE,SAApBT,KAAKlC,MAAM4C,KAAkB,iBAAmBV,KAAKlC,MAAM4C,U,GAJvCP,cCsBdQ,E,kDArBb,WAAY7C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,CACT,cAAgB,IAHD,E,qDAQjB,OACE,yBAAKsC,UAAU,iBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAgBK,KAAK,OAAOD,OAAO,MACnC,kBAAC,EAAD,CAAgBC,KAAK,aAAaD,OAAO,gBACzC,kBAAC,EAAD,CAAgBC,KAAK,YAAYD,OAAO,eACxC,kBAAC,EAAD,CAAgBC,KAAK,WAAWD,OAAO,oB,GAfrBN,a,MCYbS,MAdf,WACE,OACE,yBAAKP,UAAU,UACb,yBAAKA,UAAU,cAAf,kBACA,yBAAKA,UAAU,cAAf,sBACA,4BAAQA,UAAU,eAAeQ,KAAK,MACpC,uBAAGC,KAAK,iCAAiCC,MAAO,CAACC,eAAgB,OAAQC,MAAO,SAAUC,UAAQ,GAAlG,kB,MCIOC,MAVf,WACE,OACE,yBAAKd,UAAU,eACb,mDACA,2DAAgC,mCAAhC,6ICSSe,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALWjB,aCSJkB,G,mLARX,OACE,yBAAKhB,UAAU,kBACb,8C,GAJqBF,cCcdmB,MAbf,WACE,OACE,yBAAKjB,UAAU,cACb,+CACA,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SC8BOkB,MA5Bf,WACE,OACE,kBAAC1D,EAAA,EAAD,MACG,YAA0D,IAAvDG,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,sBAC5B,OAAIF,EAAgB,MACfA,GAAYC,GACfC,IAIA,kBAAC,IAAD,CAAQsD,SAAUC,sBAChB,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACmB,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWL,IACrC,kBAAC,IAAD,CAAOI,KAAK,aAAaC,UAAWP,IACpC,kBAAC,IAAD,CAAOM,KAAK,YAAYC,UAAWP,IACnC,kBAAC,IAAD,CAAOO,UAAWP,YCpB5BQ,EAAcC,QACW,cAA7BlD,OAAOC,SAASkD,UAEe,UAA7BnD,OAAOC,SAASkD,UAEhBnD,OAAOC,SAASkD,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1D,MAAK,SAAA+D,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzE,QACfoE,UAAUC,cAAcO,YAI1BxE,QAAQC,IACN,iHAKE8D,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBnE,QAAQC,IAAI,sCAGR8D,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACL5E,QAAQ4E,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDcnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAI3B,qBAAwB9C,OAAOC,SAASkC,MACpDuC,SAAW1E,OAAOC,SAASyE,OAIvC,OAGF1E,OAAO2E,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMR,qBAAN,sBAEPG,IAgEV,SAAiCK,EAAOC,GAEtCpD,MAAMmD,EAAO,CACXsB,QAAS,CAAE,iBAAkB,YAE5BhF,MAAK,SAAAQ,GAEJ,IAAMyE,EAAczE,EAASwE,QAAQE,IAAI,gBAEnB,MAApB1E,EAAS2E,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMrF,MAAK,SAAA+D,GACjCA,EAAauB,aAAatF,MAAK,WAC7BI,OAAOC,SAASC,eAKpBmD,EAAgBC,EAAOC,MAG1BY,OAAM,WACL3E,QAAQC,IACN,oEAvFA0F,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMrF,MAAK,WACjCJ,QAAQC,IACN,iHAMJ4D,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.c22916a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport packageJson from '../package.json';\r\nglobal.appVersion = packageJson.version;\r\n\r\n// version from response - first param, local version second param\r\nconst semverGreaterThan = (versionA, versionB) => {\r\n  const versionsA = versionA.split(/\\./g);\r\n\r\n  const versionsB = versionB.split(/\\./g);\r\n  while (versionsA.length || versionsB.length) {\r\n    const a = Number(versionsA.shift());\r\n\r\n    const b = Number(versionsB.shift());\r\n    // eslint-disable-next-line no-continue\r\n    if (a === b) continue;\r\n    // eslint-disable-next-line no-restricted-globals\r\n    return a > b || isNaN(b);\r\n  }\r\n  return false;\r\n};\r\n\r\nclass CacheBuster extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      isLatestVersion: false,\r\n      refreshCacheAndReload: () => {\r\n        console.log('Clearing cache and hard reloading...')\r\n        if (caches) {\r\n          // Service worker cache should be cleared with caches.delete()\r\n          caches.keys().then(function(names) {\r\n            for (let name of names) caches.delete(name);\r\n          });\r\n        }\r\n\r\n        // delete browser cache and hard reload\r\n        window.location.reload(true);\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/meta.json')\r\n      .then((response) => response.json())\r\n      .then((meta) => {\r\n        const latestVersion = meta.version;\r\n        const currentVersion = global.appVersion;\r\n\r\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\r\n        if (shouldForceRefresh) {\r\n          console.log(`We have a new version - ${latestVersion}. Should force refresh`);\r\n          this.setState({ loading: false, isLatestVersion: false });\r\n        } else {\r\n          console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\r\n          this.setState({ loading: false, isLatestVersion: true });\r\n        }\r\n      });\r\n  }\r\n  render() {\r\n    const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\r\n    return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\r\n  }\r\n}\r\n\r\nexport default CacheBuster;","import React, { Component } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport './NavigationItem.css';\r\n\r\nclass NavigationItem extends Component {\r\n  render() {\r\n    return (\r\n      <NavLink className=\"NavigationItem\" activeClassName='NavigationActive' exact to={this.props.toLink}>\r\n        {this.props.item === 'Home' ? 'Allen Bautista' : this.props.item}\r\n      </NavLink>\r\n    );\r\n  };\r\n}\r\n\r\nexport default NavigationItem","import React, { Component } from 'react';\r\n\r\nimport './NavigationBar.css';\r\nimport NavigationItem from '../Components/NavigationItem.js';\r\n\r\nclass NavigationBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      'NavItemActive':''\r\n    }\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <div className=\"NavigationBar\">\r\n        <div className=\"navigationItems\">\r\n          <NavigationItem item=\"Home\" toLink=\"/\" />\r\n          <NavigationItem item=\"Experience\" toLink=\"/experience\" />\r\n          <NavigationItem item=\"Portfolio\" toLink=\"/portfolio\" />\r\n          <NavigationItem item=\"Contacts\" toLink=\"/contacts\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default NavigationBar;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"Header\">\r\n      <div className=\"HeaderName\">Allen Bautista</div>\r\n      <div className=\"HeaderRole\">Software Developer</div>\r\n      <button className=\"HeaderButton\" size=\"lg\">\r\n        <a href=\"./resume_bautistaa_website.pdf\" style={{textDecoration: 'none', color: 'white'}} download>\r\n          Download CV\r\n        </a>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './HomeContent.css';\r\n\r\nfunction HomeContent() {\r\n  return (\r\n    <div className=\"HomeContent\">\r\n      <h1>DEVELOPER PORTFOLIO</h1>\r\n      <p>This site is a collection of <i>some</i> of my work (excluding works under NDAs).\r\n      I have been doing software engineering and development work since 2014. Feel free to explore!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeContent;","import React, { Component } from 'react';\r\n\r\nimport Header from './Header.js';\r\nimport HomeContent from './HomeContent.js';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <HomeContent />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react';\r\n\r\nimport './ExperienceCard.css';\r\n\r\nclass ExperienceCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className='ExperienceCard'>\r\n        <h1>Workplace</h1>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ExperienceCard;","import React from 'react';\r\n\r\nimport './Experience.css';\r\nimport ExperienceCard from '../Items/ExperienceCard';\r\n\r\nfunction Experience() {\r\n  return (\r\n    <div className='Experience'>\r\n      <h1>WORK EXPERIENCE</h1>\r\n      <div className='experienceCards'>\r\n        <ExperienceCard />\r\n        <ExperienceCard />\r\n        <ExperienceCard />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Experience;","import React from 'react';\r\nimport\r\n{\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport CacheBuster from '../CacheBuster.js';\r\nimport NavigationBar from './NavigationBar.js';\r\nimport Home from '../Components/Home.js';\r\nimport Experience from '../Components/Experience';\r\n\r\nfunction App() {\r\n  return (\r\n    <CacheBuster>\r\n      {({ loading, isLatestVersion, refreshCacheAndReload }) => {\r\n        if (loading) return null;\r\n        if (!loading && !isLatestVersion) {\r\n          refreshCacheAndReload();\r\n        }\r\n\r\n        return (\r\n          <Router basename={process.env.PUBLIC_URL}>\r\n            <div className=\"App\">\r\n              <NavigationBar />\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/experience\" component={Experience} />\r\n                <Route path=\"/portfolio\" component={Home} />\r\n                <Route path=\"/contacts\" component={Home} />\r\n                <Route component={Home} />\r\n              </Switch>\r\n            </div>\r\n          </Router>\r\n        );\r\n      }}\r\n    </CacheBuster>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}